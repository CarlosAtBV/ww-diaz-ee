//===========================================================================
//
// Lost Soul (Red, Green, Blue)
// A lost soul with minimal behavior changes.
// Originally featured in The Space Pirate
//
// CODE: Cardboard Marty, DrPyspy, adapted from code by Ghastly_dragon
// SPRITES: Captain Toenail, color edits by Cardboard Marty
//
//===========================================================================
class WVerse_LostSoul : Actor
{
    int soulType;
    
    override void PostBeginPlay()
    {
		if ( wverse_lostsoulhealth == 1 ) health *= 0.5;
	
        super.PostBeginPlay();
        soulType = random(0,3);
        
        // randomize da sprite
        switch (soulType)
        {
            case 0:
                sprite = GetSpriteIndex('1FOR');
                SetTag("Lost Soul (Red)");
                break;
            case 1:
                sprite = GetSpriteIndex('2FOR');
                SetTag("Lost Soul (Green)");
                break;
            case 2:
                sprite = GetSpriteIndex('3FOR');
                SetTag("Lost Soul (Blue)");
                break;
        }
    }
    
    override String GetObituary(Actor victim, Actor inflictor, Name mod, bool playerattack)
    {
        switch (soulType)
        {
            case 0:
                return "$WVERSE_LOSTSOUL_RED_OBIT";
            case 1:
                return "$WVERSE_LOSTSOUL_GREEN_OBIT";
            case 2:
                return "$WVERSE_LOSTSOUL_BLUE_OBIT";
        }
        
        // fallback
        return super.GetObituary(victim, inflictor, mod, playerattack);
    }
	
	Default
	{
		Health 100;
		Radius 16;
		Height 56;
		Mass 50;
		Speed 8;
		Damage 3;
		PainChance 256;
		Bloodtype "None";
		Monster;
		+FLOAT
		+NOGRAVITY
		+MISSILEMORE
		+DONTFALL
		+NOICEDEATH
		+ZDOOMTRANS
		+RETARGETAFTERSLAM
		SeeSound "lostsoul/sight";
		PainSound "lostsoul/pain";
		DeathSound "lostsoul/death";
		ActiveSound "lostsoul/active";
		Tag "Lost Soul";
	}
	States
	{
    SpriteCache:
		1FOR A 0;
		2FOR A 0;
		3FOR A 0;
		Stop;
	Spawn:
		1FOR AB 10 BRIGHT A_Look;
		1FOR A 0 BRIGHT A_Jump(16, 1);
		Loop;
		1FOR A 0 BRIGHT A_StartSound("lostsoul/active", CHAN_AUTO);
		Loop;
	See:
		1FOR AB 6 BRIGHT A_Chase;
		Loop;
	Missile:
		1FOR C 10 BRIGHT A_FaceTarget;
		1FOR D 0 BRIGHT A_StartSound("lostsoul/sight", CHAN_AUTO);
		1FOR D 4 BRIGHT A_SkullAttack;
		1FOR CCCC 1 BRIGHT;
		1FOR C 0 A_Jump(16, 6);
		1FOR DDDD 1 BRIGHT;
		1FOR D 0 A_Jump(16, 1);
		Goto Missile+4;
		1FOR C 0;
		Goto Missile+2;
	Pain:
		1FOR E 3 BRIGHT;
		1FOR E 3 BRIGHT A_Pain;
		Goto See;
	Death:
		1FOR E 4 BRIGHT
		{
			A_StartSound("lostsoul/explode", CHAN_AUTO);
			A_Quake(3, 16, 0, 300);
			A_RadiusThrust(1000, 300, RTF_NOTMISSILE|RTF_NOIMPACTDAMAGE);
		}
		1FOR F 4 BRIGHT;
		1FOR G 6 BRIGHT A_Scream;
		1FOR H 6 BRIGHT;
		1FOR I 6 BRIGHT A_NoBlocking;
		1FOR J 6;
		Stop;
	}
}