Class DiazEE_ListMenu : ListMenu
{
	ListMenuItemDiazEE_ListBackground listAnchor;
	
	Array<int> yOffs;
	
	/*virtual void ModifyItems (desc)
	{
	}*/
	
	override void Init (Menu parent, ListMenuDescriptor desc)
	{
		super.Init(parent, desc);
		
		yOffs.Clear();
		
		//ModifyItems(desc);
		
		ListMenuItem lastActive;
		int x = 0;
		int y = 0;
		
		Array<ListMenuItem> resorted;
		bool meForcing;
		Array<ListMenuItem> forceToTop;
		
		for ( int i = 0; i < mDesc.mItems.Size(); i++ )
		{
			let item = mDesc.mItems[i];
			if ( item is "ListMenuItemDiazEE_ToggleForceToEnd" )
			{
				meForcing = !meForcing;
			}
			else
			{
				if ( meForcing )
				{
					forceToTop.Push(item);
				}
				else
				{
					resorted.Push(item);
				}
			}
		}
		
		mDesc.mItems.Clear();
		for ( int i = 0; i < resorted.Size(); i++ )
		{
			mDesc.mItems.Push(resorted[i]);
			//COnsole.Printf(""..resorted[i].GetClassName());
		}
		for ( int i = 0; i < forceToTop.Size(); i++ )
		{
			mDesc.mItems.Push(forceToTop[i]);
			//COnsole.Printf(""..resorted[i].GetClassName());
		}
		
		for ( int i = 0; i < mDesc.mItems.Size(); i++ )
		{
			let item = mDesc.mItems[i];
			if ( item is "ListMenuItemDiazEE_ListBackground" )
			{
				listAnchor = ListMenuItemDiazEE_ListBackground(item);
				x = listAnchor.GetX()+listAnchor.xOffset;
				y = listAnchor.GetY()+listAnchor.yOffset;
				continue;
			}
			
			if ( !listAnchor ) continue;
			
			if ( item is "ListMenuItemTextItem" )
			{
				Console.Printf(""..ListMenuItemTextItem(item).mText);
				if ( lastActive ) y += desc.mLinespacing;
				lastActive = item;
				item.SetX(x);
				item.SetY(y);
				//yOff = ListMenuItemTextItem(item).mFont.GetHeight();
				yOffs.Push(y+ListMenuItemTextItem(item).mFont.GetHeight());
				continue;
			}
			
			//item.SetY(y+yOff);
		}
			
		if ( !listAnchor ) return; // [Py] don't continue if we ain't that type of menu...
		
		int getY;
		bool doTextCombos;
		
		for ( int i = 0; i < mDesc.mItems.Size(); i++ )
		{
			let item = mDesc.mItems[i];
			
			if ( item is "ListMenuItemDiazEE_SetBelowAsTextCombos" )
			{
				doTextCombos = true;
				continue;
			}
			
			if ( !doTextCombos ) continue;
			
			if ( item is "ListMenuItemStaticPatch" )
			{
				item.SetX(x);
				item.SetY(yOffs[getY]);
				getY++;
			}
		}
		
		for ( int i = 0; i < mDesc.mItems.Size(); i++ )
		{
			let item = mDesc.mItems[i];
			
			if ( item is "ListMenuItemDiazEE_SetDefaultSelection" )
			{
				int iter = 0;
				int toSelect = ListMenuItemDiazEE_SetDefaultSelection(item).toSelect;
				for ( int g = 0; g < mDesc.mItems.Size(); g++ )
				{
					let item = mDesc.mItems[g];
					
					//Console.Printf("%i equal to %i is %i", iter, toSelect, (iter == toSelect));
					if ( item is "ListMenuItemSelectable" )
					{
						if ( (iter == toSelect) )
						{
							//Console.Printf("YOOOOO");
							mDesc.mSelectedItem = g;
							return;
						}
						iter++;
					}
				}
			}
		}
	}
}

/*Class DiazEE_SkillMenu : ListMenu
{
	override void ModifyItems (desc)
	{
		for ( int i = 0; i < mDesc.mItems.Size(); i++ )
		{
			let item = mDesc.mItems[i];
			
			if ( item is "ListMenuItemTextItem" )
			{
				let newItem = new("ListMenuItemDiazEE_TextImageCombo");
				newItem.mXpos = item.GetX();
				newItem.mYpos = item.GetY();
				newItem.mText = item.mText;
				newItem.tex = item.tex;
			}
		}
	}
}*/

Class ListMenuItemDiazEE_SetBelowAsTextCombos : ListMenuItem
{
	void Init(ListMenuDescriptor desc)
	{
		Super.Init();
	}
	
	override void Draw (bool selected, ListMenuDescriptor desc)
	{
	}
}

Class ListMenuItemDiazEE_ToggleForceToEnd : ListMenuItem
{
	void Init(ListMenuDescriptor desc)
	{
		Super.Init();
	}
	
	override void Draw (bool selected, ListMenuDescriptor desc)
	{
	}
}

Class ListMenuItemDiazEE_SetDefaultSelection : ListMenuItem
{
	int toSelect;
	
	void Init(ListMenuDescriptor desc, int i)
	{
		Super.Init();
		toSelect = i;
	}
	
	override void Draw (bool selected, ListMenuDescriptor desc)
	{
	}
}

Class ListMenuItemDiazEE_ListBackground : ListMenuItem
{
	TextureID tex;
	int xOffset, yOffset;
	
	void Init(ListMenuDescriptor desc, double x, double y, TextureID patch, int xOff = 0, int yOff = 0)
	{
		Super.Init(x, y);
		tex = patch;
		xOffset = xOff;
		yOffset = yOff;
	}
	
	override void Draw (bool selected, ListMenuDescriptor desc)
	{
		DrawTexture(desc, tex, mXpos, mYpos, false);
	}
}

Class ListMenuItemDiazEE_TextImageCombo : ListMenuItemTextItem
{
	TextureID tex;
	
	void Init (ListMenuDescriptor desc, String text, TextureID tex, String hotkey, Name child, int param = 0)
	{
		Super.Init(desc, text, hotkey, child, param);
		self.tex = tex;
	}
	
	override void Draw (bool selected, ListMenuDescriptor desc)
	{
		super.Draw(selected, desc);
		DrawTexture(desc, tex, mXpos, mYpos + mFont.GetHeight(), false);
	}
}